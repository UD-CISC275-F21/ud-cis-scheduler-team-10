{"version":3,"sources":["components/InlineEdit.tsx","components/CourseRow.tsx","components/SemesterTable.tsx","components/SemesterTab.tsx","components/CourseList.tsx","components/WelcomeModal.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["useKeyPress","targetKey","useState","keyPressed","setKeyPressed","downHandler","key","upHandler","useEffect","window","addEventListener","removeEventListener","InlineEdit","ref","handler","text","onSetText","isInputActive","setIsInputActive","inputValue","setInputValue","wrapperRef","useRef","textRef","inputRef","enter","esc","listener","event","el","current","contains","target","document","focus","className","onClick","style","width","Math","ceil","length","value","onChange","e","CourseRow","course1","removeCourse","Number","storedCourseNumber1","setStoredCourseNumber1","Credits","storedCourseCredit1","setStoredCourseCredit1","Name","storedCourseName1","setStoredCourseName1","Description","storedCourseDes1","setStoredCourseDes1","Button","variant","SemesterTable","course2","course3","courseRows","setCourseRows","Table","striped","bordered","hover","map","post","c","newArr","filter","courseRow","includes","removeCourseRow","newCourse","SemesterTab","tab1","tab2","tab3","semesters","setSemesters","semesterNumber","setSemesterNumber","handleAddSemester","semesterTitle","newSemester","Title","Course1","Course2","Course3","removeAllSemesters","Tabs","defaultActiveKey","id","Tab","eventKey","title","semester","removeSemester","CourseList","Courses","WelcomeModal","show","setShow","handleClose","Modal","onHide","Header","closeButton","Body","Footer","courseArray","JSON","parse","stringify","CourseData","App","semester1","semester2","semester3","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"gzmBASA,SAASA,EAAYC,GAEjB,MAAoCC,oBAAS,GAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAEA,SAASC,EAAT,GAAmD,EAA5BC,MACPL,GACRG,GAAc,GAItB,IAAMG,EAAY,SAAC,GAAiC,EAA/BD,MACLL,GACRG,GAAc,IAatB,OATAI,qBAAU,WAIN,OAHAC,OAAOC,iBAAiB,UAAWL,GACnCI,OAAOC,iBAAiB,QAASH,GAE1B,WACHE,OAAOE,oBAAoB,UAAWN,GACtCI,OAAOE,oBAAoB,QAASJ,MAEzC,IACIJ,EAyGIS,MArEf,YAAqG,IA5BjGC,EACAC,EA2BiBC,EAA+E,EAA/EA,KAAMC,EAAyE,EAAzEA,UACvB,EAA0Cd,oBAAS,GAAnD,mBAAOe,EAAP,KAAsBC,EAAtB,KACA,EAAoChB,mBAASa,GAA7C,mBAAOI,EAAP,KAAmBC,EAAnB,KAEMC,EAAaC,iBAAO,MACpBC,EAAUD,iBAAO,MACjBE,EAAYF,iBAAyB,MAErCG,EAAQzB,EAAY,SACpB0B,EAAM1B,EAAY,UAgCxB,OArEAa,EAwCkBQ,EAvClBP,EAuC8B,WACtBG,IACAD,EAAUG,GACVD,GAAiB,KAzCzBV,qBAAU,WACN,IAAMmB,EAAW,SAACC,GACd,IAAMC,EAAE,OAAGhB,QAAH,IAAGA,OAAH,EAAGA,EAAKiB,QAGXD,IAAMA,EAAGE,SAASH,EAAMI,SAI7BlB,EAAQc,IAMZ,OAHAK,SAASvB,iBAAiB,YAAaiB,GACvCM,SAASvB,iBAAiB,aAAciB,GAEjC,WACHM,SAAStB,oBAAoB,YAAagB,GAC1CM,SAAStB,oBAAoB,aAAcgB,MAIhD,CAACd,EAAKC,IAyBTN,qBAAU,WACc,IAAD,EAAfS,IACQ,OAARO,QAAQ,IAARA,GAAA,UAAAA,EAAUM,eAAV,SAAmBI,WAExB,CAACjB,IAEJT,qBAAU,WACFS,IAEIQ,IACAT,EAAUG,GACVD,GAAiB,IAGjBQ,IACAN,EAAcL,GACdG,GAAiB,OAG1B,CAACO,EAAOC,IAGP,uBAAMS,UAAU,cAActB,IAAKQ,EAAnC,UACI,sBACIR,IAAKU,EACLa,QAAS,kBAAMlB,GAAiB,IAChCiB,UAAS,6CACJlB,EAA2B,SAAX,UAJzB,SAOKF,IAEL,uBACIF,IAAKW,EAGLa,MAAO,CAAEC,MAAOC,KAAKC,KAAyB,GAApBrB,EAAWsB,QAAgB,MACrDC,MAAOvB,EACPwB,SAAU,SAAAC,GACNxB,EAAcwB,EAAEZ,OAAOU,QAE3BP,UAAS,+CACLlB,EAAgB,SAAW,gBC9HxC,SAAS4B,EAAT,GAA8G,IAA1FC,EAAyF,EAAzFA,QAASC,EAAgF,EAAhFA,aAChC,EAAsD7C,mBAAS4C,EAAQE,QAAvE,mBAAOC,EAAP,KAA4BC,EAA5B,KACA,EAAsDhD,mBAAS4C,EAAQK,SAAvE,mBAAOC,EAAP,KAA4BC,EAA5B,KACA,EAAkDnD,mBAAS4C,EAAQQ,MAAnE,mBAAOC,EAAP,KAA0BC,EAA1B,KACA,EAAgDtD,mBAAS4C,EAAQW,aAAjE,mBAAOC,EAAP,KAAyBC,EAAzB,KAEA,OACI,+BACI,6BAAI,cAAC,EAAD,CAAY5C,KAAMkC,EAAqBjC,UAAW,SAAAD,GAAI,OAAImC,EAAuBnC,QACrF,6BAAI,cAAC,EAAD,CAAYA,KAAMwC,EAAmBvC,UAAW,SAAAD,GAAI,OAAIyC,EAAqBzC,QACjF,6BAAI,cAAC,EAAD,CAAYA,KAAMqC,EAAqBpC,UAAW,SAAAD,GAAI,OAAIsC,EAAuBtC,QACrF,6BAAI,cAAC,EAAD,CAAYA,KAAM2C,EAAkB1C,UAAW,SAAAD,GAAI,OAAI4C,EAAoB5C,QAC/E,6BAAI,cAAC6C,EAAA,EAAD,CAAQC,QAAU,SAASzB,QAAW,kBAAMW,EAAaE,IAAzD,+BCZT,SAASa,EAAT,GAAuH,IAA9FhB,EAA6F,EAA7FA,QAASiB,EAAoF,EAApFA,QAASC,EAA2E,EAA3EA,QAE9C,EAAoC9D,mBAAU,CAAC4C,EAASiB,EAASC,IAAjE,mBAAOC,EAAP,KAAmBC,EAAnB,KAoBA,OACI,eAACC,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,EAACT,QAAQ,OAAtC,UACI,gCACI,+BACI,+CACA,6CACA,yCACA,6CACA,6BAAI,cAACD,EAAA,EAAD,CAAQC,QAAU,SAASzB,QAjBxB,WACnB8B,EAAc,KAgBE,uCAGZ,gCACKD,EAAWM,KAAI,SAAAC,GACZ,OACI,cAAC3B,EAAD,CAA+BC,QAAW0B,EAAMzB,aAAgB,kBAnB5D,SAAC0B,GACrB,IAAMC,EAAST,EAAWU,QAAO,SAAAC,GAAS,OAAKA,EAAU5B,OAAO6B,SAASJ,MACzEP,EAAc,YAAIQ,IAiBoEI,CAAgBN,EAAKxB,UAAzEwB,EAAKxB,aAInC,cAACY,EAAA,EAAD,CAAQC,QAAU,UAAUzB,QApCf,WACjB,IAAM2C,EAAY,CAClBA,OAAmB,KACnBA,QAAoB,KACpBA,KAAiB,KACjBA,YAAwB,MACxBb,EAAc,GAAD,mBAAKD,GAAL,CAAgBc,MA8BzB,2BCpCL,SAASC,EAAT,GAAyG,IAAnFC,EAAkF,EAAlFA,KAAMC,EAA4E,EAA5EA,KAAMC,EAAsE,EAAtEA,KAErC,EAAkCjF,mBAAS,CAAC+E,EAAMC,EAAMC,IAAxD,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAA4CnF,mBAAS,GAArD,mBAAOoF,EAAP,KAAuBC,EAAvB,KAGMC,EAAoB,WACtBD,EAAkBD,EAAiB,GACnC,IAAMG,EAAgB,YAAcH,EAE9BP,EAAY,CAClBA,OAAmB,KACnBA,QAAoB,KACpBA,KAAiB,KACjBA,YAAwB,MAElBW,EAAc,GACpBA,EAAYC,MAAQF,EACpBC,EAAYE,QAAUb,EACtBW,EAAYG,QAAUd,EACtBW,EAAYI,QAAUf,EACtBM,EAAa,GAAD,mBAAKD,GAAL,CAAeM,MASzBK,EAAqB,WACvBV,EAAa,IACbE,EAAkB,IAEtB,OAAsB,IAAnBD,EAEK,gCACI,eAACU,EAAA,EAAD,CAAMC,iBAAkBb,EAAU,GAAGO,MAAOO,GAAG,gBAAgB/D,UAAU,OAAzE,UACKiD,EAAUb,KAAI,SAAAC,GACX,OACI,cAAC2B,EAAA,EAAD,CAAwBC,SAAU5B,EAAKmB,MAAOU,MAAO,CAAC7B,EAAKmB,MAAO,IAAK,cAAC/B,EAAA,EAAD,CAAyBC,QAAU,SAASzB,QAAW,kBAhB/H,SAACqC,GACpBc,EAAkBD,EAAe,GACjC,IAAMZ,EAASU,EAAUT,QAAO,SAAA2B,GAAQ,OAAKA,EAASX,MAAMd,SAASJ,MACrEY,EAAa,YAAIX,IAauI6B,CAAe/B,EAAKmB,QAAjF,cAAanB,EAAKmB,QAAzF,SACI,cAAC7B,EAAD,CAAehB,QAAW0B,EAAKoB,QAAS7B,QAAWS,EAAKqB,QAAS7B,QAAWQ,EAAKsB,WADzEtB,EAAKmB,UAKzB,cAACQ,EAAA,EAAD,CAAKC,SAAS,mBAAmBC,MAAO,cAACzC,EAAA,EAAD,CAAQC,QAAU,UAAUzB,QAAWoD,EAAvC,iCAE5C,cAAC5B,EAAA,EAAD,CAAQC,QAAU,SAASzB,QAAW2D,EAAtC,uCAKJ,gCACI,cAACC,EAAA,EAAD,CAAME,GAAG,gBAAgB/D,UAAU,OAAnC,SACI,cAACgE,EAAA,EAAD,CAAKC,SAAS,mBAAmBC,MAAO,cAACzC,EAAA,EAAD,CAAQC,QAAU,UAAUzB,QAAWoD,EAAvC,gCAE5C,cAAC5B,EAAA,EAAD,CAAQC,QAAU,SAASzB,QAAW2D,EAAtC,uC,kBC7DT,SAASS,IACZ,OACI,qBAAKrE,UAAU,mBAAf,SACI,eAACgC,EAAA,EAAD,CAAOC,SAAO,EACVC,UAAQ,EACRC,OAAK,EACLT,QAAQ,OACR1B,UAAU,eAJd,UAKI,uBAAOA,UAAU,oBAAjB,SACI,+BACI,oBAAIA,UAAU,gBAAd,2BACA,oBAAIA,UAAU,cAAd,yBACA,oBAAIA,UAAU,iBAAd,qBACA,oBAAIA,UAAU,qBAAd,8BAGR,uBAAOA,UAAU,oBAAjB,SACMsE,EAAQlC,KAAI,SAAAC,GACV,OACI,+BACI,6BAAMA,EAAKxB,SACX,6BAAMwB,EAAKlB,OACX,oBAAInB,UAAU,UAAd,SAA0BqC,EAAKrB,UAC/B,6BAAMqB,EAAKf,gBAJNe,EAAKxB,kB,YCrBnC,SAAS0D,IACZ,MAAwBxG,oBAAS,GAAjC,mBAAOyG,EAAP,KAAaC,EAAb,KACMC,EAAc,kBAAMD,GAAQ,IAGlC,OACI,qCAAE,cAAChD,EAAA,EAAD,CAAQC,QAAQ,OAAOzB,QAHV,kBAAMwE,GAAQ,IAG3B,wBAEO,eAACE,EAAA,EAAD,CAAOH,KAAMA,EAAMI,OAAQF,EAA3B,UACL,cAACC,EAAA,EAAME,OAAP,CAAcC,aAAW,EAAzB,SACI,cAACH,EAAA,EAAMnB,MAAP,uCAEJ,eAACmB,EAAA,EAAMI,KAAP,6HAA2H,sBAA3H,2cAMA,cAACJ,EAAA,EAAMK,OAAP,UACI,cAACvD,EAAA,EAAD,CAAQC,QAAQ,YAAYzB,QAASyE,EAArC,2BCXhB,IAAMO,EAAcC,KAAKC,MAAMD,KAAKE,UAAUC,IAmC/BC,MAjCf,WACI,IAAMC,EAAY,CAClBA,MAAkB,cAClBA,EAAU9B,QAAUwB,EAAY,GAChCM,EAAU7B,QAAUuB,EAAY,GAChCM,EAAU5B,QAAUsB,EAAY,GAEhC,IAAMO,EAAY,CAClBA,MAAkB,cAClBA,EAAU/B,QAAUwB,EAAY,GAChCO,EAAU9B,QAAUuB,EAAY,GAChCO,EAAU7B,QAAUsB,EAAY,GAEhC,IAAMQ,EAAY,CAClBA,MAAkB,cAKlB,OAJAA,EAAUhC,QAAUwB,EAAY,GAChCQ,EAAU/B,QAAUuB,EAAY,GAChCQ,EAAU9B,QAAUsB,EAAY,GAG5B,sBAAKjF,UAAU,MAAf,UAEI,kDACA,cAACuE,EAAD,IACA,cAAC1B,EAAD,CAAaC,KAAMyC,EAAWxC,KAAMyC,EAAWxC,KAAMyC,IACrD,gCACI,6CACA,cAAC,EAAD,WC1BDC,EAZS,SAACC,GACjBA,GAAeA,aAAuBC,UACtC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QACzDJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHpBQ,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJvG,SAASwG,eAAe,SAM5BZ,M","file":"static/js/main.a052f76c.chunk.js","sourcesContent":["// Source: https://dev.to/joelmturner/build-an-inline-edit-text-input-with-react-hooks-4nah\n// Creates an inline text editing funcitonal component\n\nimport React, { useState, useEffect, useRef, RefObject } from \"react\";\nimport \"./InlineEdit.css\";\n\n\n// Source: https://usehooks.com/useKeyPress/\n// Creates a hook that can handle key presses\nfunction useKeyPress(targetKey: string): boolean {\n    // State for keeping track of whether key is pressed\n    const [keyPressed, setKeyPressed] = useState(false);\n    // If pressed key is our target key then set to true\n    function downHandler({ key }: {key: string}): void {\n        if (key === targetKey) {\n            setKeyPressed(true);\n        }\n    }\n    // If released key is our target key then set to false\n    const upHandler = ({ key }: {key: string}): void => {\n        if (key === targetKey) {\n            setKeyPressed(false);\n        }\n    };\n    // Add event listeners\n    useEffect(() => {\n        window.addEventListener(\"keydown\", downHandler);\n        window.addEventListener(\"keyup\", upHandler);\n        // Remove event listeners on cleanup\n        return () => {\n            window.removeEventListener(\"keydown\", downHandler);\n            window.removeEventListener(\"keyup\", upHandler);\n        };\n    }, []); // Empty array ensures that effect is only run on mount and unmount\n    return keyPressed;\n}\n\n// Source: https://usehooks-typescript.com/react-hook/use-on-click-outside\n// Creates a hook that handles clicking outside of the editable text area\ntype AnyEvent = MouseEvent | TouchEvent\n\nfunction useOnClickOutside<T extends HTMLElement = HTMLElement>(\n    ref: RefObject<T>,\n    handler: (event: AnyEvent) => void,): void {\n    useEffect(() => {\n        const listener = (event: AnyEvent) => {\n            const el = ref?.current;\n\n            // Do nothing if clicking ref's element or descendent elements\n            if (!el || el.contains(event.target as Node)) {\n                return;\n            }\n\n            handler(event);\n        };\n\n        document.addEventListener(\"mousedown\", listener);\n        document.addEventListener(\"touchstart\", listener);\n\n        return () => {\n            document.removeEventListener(\"mousedown\", listener);\n            document.removeEventListener(\"touchstart\", listener);\n        };\n\n        // Reload only if ref or handler changes\n    }, [ref, handler]);\n}\n\n// Source: https://dev.to/joelmturner/build-an-inline-edit-text-input-with-react-hooks-4nah\n// Returns a functional component that allows text to be edited inline\nfunction InlineEdit({text, onSetText}: {text: string, onSetText: (t: string) => void}): JSX.Element {\n    const [isInputActive, setIsInputActive] = useState(false);\n    const [inputValue, setInputValue] = useState(text);\n\n    const wrapperRef = useRef(null);\n    const textRef = useRef(null);\n    const inputRef  = useRef<HTMLInputElement>(null);\n\n    const enter = useKeyPress(\"Enter\");\n    const esc = useKeyPress(\"Escape\");\n\n    // check to see if the user clicked outside of this component\n    useOnClickOutside(wrapperRef, () => {\n        if (isInputActive) {\n            onSetText(inputValue);\n            setIsInputActive(false);\n        }\n    });\n\n    // focus the cursor in the input field on edit start\n    useEffect(() => {\n        if (isInputActive) {\n            inputRef?.current?.focus();\n        }\n    }, [isInputActive]);\n\n    useEffect(() => {\n        if (isInputActive) {\n        // if Enter is pressed, save the text and case the editor\n            if (enter) {\n                onSetText(inputValue);\n                setIsInputActive(false);\n            }\n            // if Escape is pressed, revert the text and close the editor\n            if (esc) {\n                setInputValue(text);\n                setIsInputActive(false);\n            }\n        }\n    }, [enter, esc]); // watch the Enter and Escape key presses\n\n    return (\n        <span className=\"inline-text\" ref={wrapperRef}>\n            <span\n                ref={textRef}\n                onClick={() => setIsInputActive(true)}\n                className={`inline-text_copy inline-text_copy--${\n                    !isInputActive ? \"active\" : \"hidden\"\n                }`}\n            >\n                {text}\n            </span>\n            <input\n                ref={inputRef}\n                // set the width to the input length multiplied by the x height\n                // it's not quite right but gets it close\n                style={{ width: Math.ceil(inputValue.length * 0.9) + \"ex\" }}\n                value={inputValue}\n                onChange={e => {\n                    setInputValue(e.target.value);\n                }}\n                className={`inline-text_input inline-text_input--${\n                    isInputActive ? \"active\" : \"hidden\"\n                }`}\n            />\n        </span>\n    );\n}\n\nexport default InlineEdit;","import React, {useState} from \"react\";\nimport {Button} from \"react-bootstrap\";\nimport { Course } from \"../interfaces/Course\";\nimport InlineEdit from \"./InlineEdit\";\n\n\nexport function CourseRow({course1, removeCourse}: {course1:Course, removeCourse: (c: string) => void}): JSX.Element{\n    const [storedCourseNumber1, setStoredCourseNumber1] = useState(course1.Number);\n    const [storedCourseCredit1, setStoredCourseCredit1] = useState(course1.Credits);\n    const [storedCourseName1, setStoredCourseName1] = useState(course1.Name);\n    const [storedCourseDes1, setStoredCourseDes1] = useState(course1.Description);\n    \n    return(\n        <tr>\n            <td><InlineEdit text={storedCourseNumber1} onSetText={text => setStoredCourseNumber1(text)}/></td>\n            <td><InlineEdit text={storedCourseName1} onSetText={text => setStoredCourseName1(text)}/></td>\n            <td><InlineEdit text={storedCourseCredit1} onSetText={text => setStoredCourseCredit1(text)}/></td>\n            <td><InlineEdit text={storedCourseDes1} onSetText={text => setStoredCourseDes1(text)}/></td>\n            <td><Button variant = 'danger' onClick = {() => removeCourse(storedCourseNumber1)}>Clear Course</Button></td>\n        </tr>\n    );\n\n}","import React, { useState } from \"react\";\nimport { Table } from \"react-bootstrap\";\nimport { Course } from \"../interfaces/Course\";\nimport { Button } from \"react-bootstrap\";\nimport { CourseRow } from \"./CourseRow\";\n\nexport function SemesterTable ({course1, course2, course3}: {course1: Course, course2: Course, course3: Course}): JSX.Element{\n\n    const [courseRows, setCourseRows] = useState ([course1, course2, course3]);\n\n    const handleAddRow = () => {\n        const newCourse = {} as Course;\n        newCourse.Number = \"--\";\n        newCourse.Credits = \"--\";\n        newCourse.Name = \"--\";\n        newCourse.Description = \"--\";\n        setCourseRows([...courseRows,newCourse]);\n    };\n\n    const handleClearAll = () =>{\n        setCourseRows([]);\n    };\n    \n    const removeCourseRow = (c: string) => {\n        const newArr = courseRows.filter(courseRow => !courseRow.Number.includes(c));\n        setCourseRows([...newArr]);\n    };\n\n    return(\n        <Table striped bordered hover variant=\"dark\">\n            <thead>\n                <tr>\n                    <th>Course Number</th>\n                    <th>Course Name</th>\n                    <th>Credits</th>\n                    <th>Description</th>\n                    <th><Button variant = 'danger' onClick = {handleClearAll}>Remove All Courses</Button></th>\n                </tr>\n            </thead>\n            <tbody>\n                {courseRows.map(post => {\n                    return(\n                        <CourseRow key = {post.Number} course1 = {post} removeCourse = {() => removeCourseRow(post.Number) }></CourseRow>\n                    );\n                })}\n            </tbody>\n            <Button variant = 'success' onClick = {handleAddRow}>Add Course</Button>\n        </Table>\n\n        \n    );\n}\n\n\n","import React, { useState } from \"react\";\nimport { Button, Tab, Tabs } from \"react-bootstrap\";\nimport { Course } from \"../interfaces/Course\";\nimport { Semester } from \"../interfaces/Semester\";\nimport { SemesterTable } from \"./SemesterTable\";\n\n\n\n//const courseArray = JSON.parse(JSON.stringify(CourseData));\n\nexport function SemesterTab({tab1, tab2, tab3}: {tab1: Semester, tab2: Semester, tab3: Semester}): JSX.Element {\n\n    const [semesters, setSemesters] = useState([tab1, tab2, tab3]);\n    const [semesterNumber, setSemesterNumber] = useState(4);\n    \n\n    const handleAddSemester = () => {\n        setSemesterNumber(semesterNumber + 1);\n        const semesterTitle = \"Semester \" + semesterNumber as string;\n\n        const newCourse = {} as Course;\n        newCourse.Number = \"--\";\n        newCourse.Credits = \"--\";\n        newCourse.Name = \"--\";\n        newCourse.Description = \"--\";\n\n        const newSemester = {} as Semester;\n        newSemester.Title = semesterTitle;\n        newSemester.Course1 = newCourse;\n        newSemester.Course2 = newCourse;\n        newSemester.Course3 = newCourse;\n        setSemesters([...semesters,newSemester]);\n    };\n\n    const removeSemester = (c: string) => {\n        setSemesterNumber(semesterNumber-1);\n        const newArr = semesters.filter(semester => !semester.Title.includes(c));\n        setSemesters([...newArr]);\n    };\n\n    const removeAllSemesters = () =>{\n        setSemesters([]);\n        setSemesterNumber(0);\n    };\n    if(semesterNumber !== 0){\n        return (\n            <div>\n                <Tabs defaultActiveKey={semesters[0].Title} id=\"Semester_tabs\" className=\"mb-3\">\n                    {semesters.map(post => {\n                        return(\n                            <Tab key = {post.Title} eventKey={post.Title} title={[post.Title, \" \", <Button key={post.Title} variant = 'danger' onClick = {() => removeSemester(post.Title)}>X</Button>]}>\n                                <SemesterTable course1 = {post.Course1} course2 = {post.Course2} course3 = {post.Course3}></SemesterTable>\n                            </Tab>\n                        );\n                    })}\n                    <Tab eventKey=\"add_semester_tab\" title={<Button variant = 'success' onClick = {handleAddSemester}>+Add Semester+</Button>}></Tab>\n                </Tabs>\n                <Button variant = 'danger' onClick = {removeAllSemesters}>-Remove all Semesters-</Button>\n            </div>\n        );\n    } else{\n        return(\n            <div>\n                <Tabs id=\"Semester_tabs\" className=\"mb-3\">\n                    <Tab eventKey=\"add_semester_tab\" title={<Button variant = 'success' onClick = {handleAddSemester}>+Add Semester+</Button>}></Tab>\n                </Tabs>\n                <Button variant = 'danger' onClick = {removeAllSemesters}>-Remove all Semesters-</Button>\n            </div>\n        );\n    }\n} \n\n/*<Tabs defaultActiveKey=\"semester_1\" id=\"uncontrolled-tab-example\" className=\"mb-3\">\n            <Tab eventKey=\"semester_1\" title=\"Semester 1\" >\n                <SemesterTable courses={[courseArray[0] as Course, courseArray[1] as Course, courseArray[2] as Course]}></SemesterTable>\n            </Tab>\n            <Tab eventKey=\"semester_2\" title=\"Semester 2\">\n                <SemesterTable courses={[courseArray[3] as Course, courseArray[4] as Course, courseArray[5] as Course]}></SemesterTable>\n            </Tab>\n            <Tab eventKey=\"semester_3\" title=\"Semester 3\">\n                <SemesterTable courses={[courseArray[6] as Course, courseArray[7] as Course, courseArray[8] as Course]}></SemesterTable>\n            </Tab>\n        </Tabs>\n\n            {tab1, tab2, tab3}: {tab1: Semester, tab2: Semester, tab3: Semester}\n\n            <Tabs defaultActiveKey={semesters[0].Title} id=\"Semester_tabs\" className=\"mb-3\">\n            {semesters.map(post => {\n                return(\n                    <SingleSemesterTab key = {post.Title} semester = {post}></SingleSemesterTab>\n                );\n            })}\n        </Tabs>\n     */","import Courses from \"../data/courses.json\";\nimport { Table } from \"react-bootstrap\";\nimport React from \"react\";\nimport \"./CourseList.css\";\n\nexport function CourseList (): JSX.Element {\n    return (\n        <div className=\"course-table-div\" >\n            <Table striped \n                bordered \n                hover\n                variant=\"dark\"\n                className=\"course-table\">\n                <thead className=\"course-table-head\">\n                    <tr>\n                        <th className=\"course-number\">Course Number</th>\n                        <th className=\"course-name\">Course Name</th>\n                        <th className=\"course-credits\">Credits</th>\n                        <th className=\"course-description\">Description</th>\n                    </tr>\n                </thead>\n                <tbody className=\"course-table-body\">\n                    { Courses.map(post => {\n                        return(\n                            <tr key={post.Number}>\n                                <td>{ post.Number }</td>\n                                <td>{ post.Name }</td>\n                                <td className=\"credits\">{ post.Credits }</td>\n                                <td>{ post.Description }</td>\n                            </tr>\n                        );\n                    })}\n                </tbody>\n            </Table>\n\n\n        </div>\n    );\n}","import {Modal,Button} from \"react-bootstrap\";\nimport React, {useState} from \"react\";\n\nexport function WelcomeModal(): JSX.Element{\n    const [show, setShow] = useState(false);\n    const handleClose = () => setShow(false);\n    const handleShow = () => setShow(true);\n    \n    return(\n        <><Button variant=\"info\" onClick={handleShow}>\n            Need help?\n        </Button><Modal show={show} onHide={handleClose}>\n            <Modal.Header closeButton>\n                <Modal.Title>About UD CIS Scheduler</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>Welcome! This site should be a nifty resource for students, advisors, and teachers to set up a course schedule.<p></p> You can make multiplie\n                        schedules for future semesters if you wish by using the tabs at the top, or you can just stick to one semester.\n                        You can get started by taking a look at the course list, and clicking on the course info on the scheduler to edit it to your liking.\n                        You can also add courses using the green &quot;Add Course button&quot;, clear specific courses using the &quot;Clear Course&quot; button, or \n                        clear an entire semester using the &quot;Remove all Courses&quot; button.\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"secondary\" onClick={handleClose}>\n                    Close\n                </Button>\n            </Modal.Footer>\n        </Modal></>\n    );\n}","import React from \"react\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { SemesterTab } from \"./components/SemesterTab\";\nimport { CourseList } from \"./components/CourseList\";\nimport {WelcomeModal} from \"./components/WelcomeModal\";\nimport CourseData from \"./data/courses.json\";\nimport { Semester } from \"./interfaces/Semester\";\nimport { Course } from \"./interfaces/Course\";\n\n\nconst courseArray = JSON.parse(JSON.stringify(CourseData));\n\nfunction App(): JSX.Element {\n    const semester1 = {} as Semester;\n    semester1.Title = \"Semester 1\";\n    semester1.Course1 = courseArray[0] as Course;\n    semester1.Course2 = courseArray[1] as Course;\n    semester1.Course3 = courseArray[2] as Course;\n\n    const semester2 = {} as Semester;\n    semester2.Title = \"Semester 2\";\n    semester2.Course1 = courseArray[4] as Course;\n    semester2.Course2 = courseArray[5] as Course;\n    semester2.Course3 = courseArray[6] as Course;\n\n    const semester3 = {} as Semester;\n    semester3.Title = \"Semester 3\";\n    semester3.Course1 = courseArray[7] as Course;\n    semester3.Course2 = courseArray[8] as Course;\n    semester3.Course3 = courseArray[9] as Course;\n\n    return (\n        <div className=\"App\">\n\n            <h1>UD CIS Scheduler</h1>\n            <WelcomeModal></WelcomeModal>\n            <SemesterTab tab1={semester1} tab2={semester2} tab3={semester3}></SemesterTab>\n            <div>\n                <h2>Course List</h2>\n                <CourseList></CourseList>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}