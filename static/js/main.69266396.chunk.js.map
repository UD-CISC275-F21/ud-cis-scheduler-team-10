{"version":3,"sources":["components/EditCourseModal.tsx","components/CourseRow.tsx","components/SemesterTab.tsx","components/CourseList.tsx","components/WelcomeModal.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["EditCourseModal","visible","setVisible","editCourse","course","semesterTitle","useState","Number","courseNumber","setCourseNumber","Credits","courseCredits","setCourseCredits","Name","courseName","setCourseName","Description","courseDescription","setCourseDescription","hide","Modal","show","onHide","Header","closeButton","Title","Body","Form","Group","className","controlId","Label","Control","as","rows","value","onChange","ev","target","Footer","Button","variant","onClick","CourseRow","course1","removeCourse","LOCAL_STORAGE_COURSES","SemesterTab","loadCourses","tab1","tab2","tab3","rawCourses","localStorage","getItem","JSON","parse","getLocalStorageCourses","semesterCount","setSemesterCount","semesterNumber","setSemesterNumber","semesters","setSemesters","oldCourse","newCourse","title","i","length","newArr","cloneDeep","j","Courses","save","setItem","stringify","handleAddSemester","newSemester","removeAllSemesters","Tabs","defaultActiveKey","id","map","semester","Tab","eventKey","c","filter","includes","removeSemester","Table","striped","bordered","hover","t","handleClearAll","newSemesterArr","newCourseArr","courseRow","removeCourseRow","handleAddRow","data","CourseList","post","WelcomeModal","setShow","handleClose","courseArray","CourseData","App","semester1","semester2","semester3","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.69266396.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { Button, Form, Modal } from \"react-bootstrap\";\nimport { Course } from \"../interfaces/Course\";\n\nexport function EditCourseModal({visible, setVisible, editCourse, course, semesterTitle}:\n    {visible: boolean, setVisible: (b: boolean) => void,\n    editCourse: (oldc: Course, newc: Course, t: string) => void, course: Course, semesterTitle: string}): JSX.Element {\n    const [courseNumber, setCourseNumber] = useState(course.Number);\n    const [courseCredits, setCourseCredits] = useState(course.Credits);\n    const [courseName, setCourseName] = useState(course.Name);\n    const [courseDescription, setCourseDescription] = useState(course.Description);\n\n    function saveCourse() {\n        const newCourse = {\n            Number: courseNumber,\n            Credits: courseCredits,\n            Name: courseName,\n            Description: courseDescription\n        };\n        editCourse(course, newCourse, semesterTitle);\n        setVisible(false);\n    }\n\n    const hide = () => setVisible(false);\n    return (\n        <Modal show={visible} onHide={hide}>\n            <Modal.Header closeButton>\n                <Modal.Title>Edit Course</Modal.Title>\n            </Modal.Header>\n\n            <Modal.Body>\n                <Form>\n                    <Form.Group className=\"mb-3\" controlId=\"editCourseForm.courseNumberArea\">\n                        <Form.Label data-testid=\"prompt-entry-textbox\">Course Number</Form.Label>\n                        <Form.Control as=\"textarea\" rows={3}\n                            value={courseNumber}\n                            onChange={(ev: React.ChangeEvent<HTMLTextAreaElement>) => setCourseNumber(ev.target.value)}/>\n                    </Form.Group>\n                    <Form.Group className=\"mb-3\" controlId=\"editCourseForm.courseCreditsArea\">\n                        <Form.Label>Credits</Form.Label>\n                        <Form.Control as=\"textarea\" rows={3} \n                            value={courseCredits}\n                            onChange={(ev: React.ChangeEvent<HTMLTextAreaElement>) => setCourseCredits(ev.target.value)}/>\n                    </Form.Group>\n                    <Form.Group className=\"mb-3\" controlId=\"editCourseForm.courseNameArea\">\n                        <Form.Label>Course Name</Form.Label>\n                        <Form.Control as=\"textarea\" rows={3} \n                            value={courseName}\n                            onChange={(ev: React.ChangeEvent<HTMLTextAreaElement>) => setCourseName(ev.target.value)}/>\n                    </Form.Group>\n                    <Form.Group className=\"mb-3\" controlId=\"editCourseForm.courseDescriptionArea\">\n                        <Form.Label>Course Description</Form.Label>\n                        <Form.Control as=\"textarea\" rows={3} \n                            value={courseDescription}\n                            onChange={(ev: React.ChangeEvent<HTMLTextAreaElement>) => setCourseDescription(ev.target.value)}/>\n                    </Form.Group>\n                </Form>\n            </Modal.Body>\n\n            <Modal.Footer>\n                <Button data-testid=\"close-button\" variant=\"secondary\" onClick={hide}>Close</Button>\n                <Button data-testid=\"save-changes-button\" variant=\"primary\" onClick={saveCourse}>Save changes</Button>\n            </Modal.Footer>\n        </Modal>\n    );\n}","import React, {useState} from \"react\";\nimport {Button} from \"react-bootstrap\";\nimport { Course } from \"../interfaces/Course\";\nimport { EditCourseModal } from \"./EditCourseModal\";\n\n\nexport function CourseRow({course1, semesterTitle, removeCourse, editCourse}: {course1:Course, semesterTitle: string, removeCourse: (c: string) => void, editCourse: (oldc: Course, newc: Course, t: string) => void}): JSX.Element{\n    const [visible, setVisible] = useState(false);\n\n    return(\n        <div>\n            <tr>\n                <td>{course1.Number}</td>\n                <td>{course1.Credits}</td>\n                <td>{course1.Name}</td>\n                <td>{course1.Description}</td>\n                <td><Button variant='success' onClick = {() => setVisible(true)}>Edit Course</Button></td>\n                <td><Button variant = 'danger' onClick = {() => removeCourse(course1.Number)}>Clear Course</Button></td>\n            </tr>\n            <EditCourseModal visible={visible} setVisible={setVisible} editCourse={ editCourse}  course={course1} semesterTitle = {semesterTitle}></EditCourseModal>\n        </div>\n    );\n\n}","import React, { useState } from \"react\";\nimport { Button, Tab, Table, Tabs } from \"react-bootstrap\";\nimport { Course } from \"../interfaces/Course\";\nimport { Semester } from \"../interfaces/Semester\";\nimport { CourseRow } from \"./CourseRow\";\nimport { CSVLink } from \"react-csv\";\nimport {cloneDeep} from \"lodash\";\n\n\n\n//const courseArray = JSON.parse(JSON.stringify(CourseData));\n\nexport const LOCAL_STORAGE_COURSES = \"scheduler-courses\";\n\nexport function getLocalStorageCourses({tab1, tab2, tab3}: {tab1: Semester, tab2: Semester, tab3: Semester}): Semester[]{\n    const rawCourses: string | null = localStorage.getItem(LOCAL_STORAGE_COURSES);\n    if (rawCourses == null) {\n        return[tab1,tab2,tab3];\n    }else {\n        return JSON.parse(rawCourses);\n    }\n}\n\nexport function SemesterTab({tab1, tab2, tab3}: {tab1: Semester, tab2: Semester, tab3: Semester}): JSX.Element {\n    const loadCourses = getLocalStorageCourses({tab1, tab2, tab3});\n    const [semesterCount, setSemesterCount] = useState(3);\n    const [semesterNumber, setSemesterNumber] = useState(4);\n    const [semesters, setSemesters] = useState(loadCourses);\n\n\n    function editCourse(oldCourse: Course, newCourse: Course, title: string) {\n        for (let i = 0; i < semesters.length; i++) {\n            if (semesters[i].Title === title) {\n                const newArr = cloneDeep(semesters);\n                for (let j = 0; j<newArr[i].Courses.length; j++) {\n                    if (newArr[i].Courses[j].Number === oldCourse.Number) {\n                        newArr[i].Courses[j] = newCourse;\n                        setSemesters(newArr);\n                    }\n                }    \n            }\n        }\n    }\n    \n    function save(){\n        localStorage.setItem(LOCAL_STORAGE_COURSES, JSON.stringify(semesters));\n    }\n    const handleAddSemester = () => {\n        setSemesterCount(semesterCount+1);\n        setSemesterNumber(semesterNumber + 1);\n        const semesterTitle = \"Semester \" + semesterNumber as string;\n\n        const newCourse = {} as Course;\n        newCourse.Number = \"--\";\n        newCourse.Credits = \"--\";\n        newCourse.Name = \"--\";\n        newCourse.Description = \"--\";\n\n        const newSemester = {} as Semester;\n        newSemester.Title = semesterTitle;\n        newSemester.Courses = [newCourse, newCourse, newCourse];\n        setSemesters([...semesters,newSemester]);\n    };\n\n    const removeSemester = (c: string) => {\n        setSemesterCount(semesterCount-1);\n        setSemesterNumber(semesterNumber-1);\n        const newArr = semesters.filter(semester => !semester.Title.includes(c));\n        setSemesters([...newArr]);\n    };\n\n    const removeAllSemesters = () =>{\n        setSemesters([]);\n        setSemesterNumber(1);\n        setSemesterCount(0);\n    };\n\n\n    const handleAddRow = (t: string) => {\n        const newCourse = {} as Course;\n        newCourse.Number = \"--\";\n        newCourse.Credits = \"--\";\n        newCourse.Name = \"--\";\n        newCourse.Description = \"--\";\n        for (let i = 0; i < semesters.length; i++) {\n            if (semesters[i].Title === t) {\n                const newArr = [...semesters];\n                newArr[i].Courses = [...newArr[i].Courses, newCourse];\n                setSemesters([...newArr]);\n            }\n        }\n    };\n\n    const handleClearAll = (t: string) =>{\n        for (let i = 0; i < semesters.length; i++) {\n            if (semesters[i].Title === t) {\n                const newArr = [...semesters];\n                newArr[i].Courses = [];\n                setSemesters([...newArr]);\n            }\n        }\n    };\n    \n    const removeCourseRow = (t:string, c: string) => {\n        for (let i = 0; i < semesters.length; i++) {\n            if (semesters[i].Title === t) {\n                const newSemesterArr = [...semesters];\n                const newCourseArr = newSemesterArr[i].Courses.filter(courseRow => !courseRow.Number.includes(c));\n                newSemesterArr[i].Courses = [...newCourseArr];\n                setSemesters(newSemesterArr);\n            }\n        }\n    };\n\n\n    if(semesterCount !== 0){\n        return (\n            <div>\n                <Tabs defaultActiveKey={semesters[0].Title} id=\"Semester_tabs\" className=\"mb-3\">\n                    {semesters.map(semester => {\n                        return(\n                            <Tab key = {semester.Title} eventKey={semester.Title} title={[semester.Title, \" \", <Button key={semester.Title} variant = 'danger' onClick = {() => removeSemester(semester.Title)}>X</Button>]}>\n                                <Table striped bordered hover variant=\"dark\">\n                                    <thead>\n                                        <tr>\n                                            <th>Course Number</th>\n                                            <th>Course Name</th>\n                                            <th>Credits</th>\n                                            <th>Description</th>\n                                            <th><Button variant = 'danger' onClick = {() => handleClearAll(semester.Title)}>Remove All Courses</Button></th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                        {semester.Courses.map((course: Course) => {\n                                            return(\n                                                <div key = {course.Number}>\n                                                    <CourseRow  course1 = {course} removeCourse = {() => removeCourseRow(semester.Title, course.Number) } editCourse={editCourse} semesterTitle={semester.Title}></CourseRow>\n                                                    \n                                                </div>\n                                            );\n                                        })}\n                                    </tbody>\n                                    <Button variant = 'success' onClick = {() => handleAddRow(semester.Title)}>Add Course</Button>\n                                </Table>\n                            </Tab>\n                        );\n                    })}\n                    <Tab eventKey=\"add_semester_tab\" title={<Button variant = 'success' onClick = {handleAddSemester}>+Add Semester+</Button>}></Tab>\n                </Tabs>\n                <Button variant = 'danger' onClick = {removeAllSemesters}>-Remove all Semesters-</Button>\n                <Button variant = 'success' onClick = {save}>Save Courses</Button>\n                <div>\n                    <CSVLink data = {JSON.stringify(semesters,null,2)}>Download to CSV!</CSVLink>\n                </div>\n                \n            </div> \n        );\n    } else{\n        return(\n            <div>\n                <Tabs id=\"Semester_tabs\" className=\"mb-3\">\n                    <Tab eventKey=\"add_semester_tab\" title={<Button variant = 'success' onClick = {handleAddSemester}>+Add Semester+</Button>}></Tab>\n                </Tabs>\n                <Button variant = 'danger' onClick = {removeAllSemesters}>-Remove all Semesters-</Button>\n                <Button variant = 'success' onClick = {save}>Save Courses</Button>\n            </div>\n        );\n    }\n} \n","import Courses from \"../data/courses.json\";\nimport { Table } from \"react-bootstrap\";\nimport React from \"react\";\nimport \"./CourseList.css\";\n\nexport function CourseList (): JSX.Element {\n    return (\n        <div className=\"course-table-div\" >\n            <Table striped \n                bordered \n                hover\n                variant=\"dark\"\n                className=\"course-table\">\n                <thead className=\"course-table-head\">\n                    <tr>\n                        <th className=\"course-number\">Course Number</th>\n                        <th className=\"course-name\">Course Name</th>\n                        <th className=\"course-credits\">Credits</th>\n                        <th className=\"course-description\">Description</th>\n                    </tr>\n                </thead>\n                <tbody className=\"course-table-body\">\n                    { Courses.map(post => {\n                        return(\n                            <tr key={post.Number}>\n                                <td>{ post.Number }</td>\n                                <td>{ post.Name }</td>\n                                <td className=\"credits\">{ post.Credits }</td>\n                                <td>{ post.Description }</td>\n                            </tr>\n                        );\n                    })}\n                </tbody>\n            </Table>\n\n\n        </div>\n    );\n}","import {Modal,Button} from \"react-bootstrap\";\nimport React, {useState} from \"react\";\n\nexport function WelcomeModal(): JSX.Element{\n    const [show, setShow] = useState(false);\n    const handleClose = () => setShow(false);\n    const handleShow = () => setShow(true);\n    \n    return(\n        <><Button variant=\"info\" onClick={handleShow}>\n            Need help?\n        </Button><Modal show={show} onHide={handleClose}>\n            <Modal.Header closeButton>\n                <Modal.Title>About UD CIS Scheduler</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>Welcome! This site should be a nifty resource for students, advisors, and teachers to set up a course schedule.<p></p> You can make multiplie\n                        schedules for future semesters if you wish by using the tabs at the top, or you can just stick to one semester.\n                        You can get started by taking a look at the course list, and clicking on the course info on the scheduler to edit it to your liking.\n                        You can also add courses using the green &quot;Add Course button&quot;, clear specific courses using the &quot;Clear Course&quot; button, or \n                        clear an entire semester using the &quot;Remove all Courses&quot; button.\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"secondary\" onClick={handleClose}>\n                    Close\n                </Button>\n            </Modal.Footer>\n        </Modal></>\n    );\n}","import React from \"react\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { SemesterTab } from \"./components/SemesterTab\";\nimport { CourseList } from \"./components/CourseList\";\nimport {WelcomeModal} from \"./components/WelcomeModal\";\nimport CourseData from \"./data/courses.json\";\nimport { Semester } from \"./interfaces/Semester\";\nimport { Course } from \"./interfaces/Course\";\n\n\nconst courseArray = JSON.parse(JSON.stringify(CourseData));\n\nfunction App(): JSX.Element {\n    \n\n    const semester1 = {} as Semester;\n    semester1.Title = \"Semester 1\";\n    semester1.Courses = [courseArray[0] as Course, courseArray[1] as Course, courseArray[2] as Course];\n\n    const semester2 = {} as Semester;\n    semester2.Title = \"Semester 2\";\n    semester2.Courses = [courseArray[3] as Course, courseArray[4] as Course, courseArray[5] as Course];\n\n    const semester3 = {} as Semester;\n    semester3.Title = \"Semester 3\";\n    semester3.Courses = [courseArray[6] as Course, courseArray[7] as Course, courseArray[8] as Course];\n   \n\n    return (\n        <div className=\"App\">\n\n            <h1>UD CIS Scheduler</h1>\n            <WelcomeModal></WelcomeModal>\n            <SemesterTab tab1={semester1} tab2={semester2} tab3={semester3}></SemesterTab>\n            <div>\n                <h2>Course List</h2>\n                <CourseList></CourseList>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}